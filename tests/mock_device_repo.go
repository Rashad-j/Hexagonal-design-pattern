// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/device_repo.go

// Package tests is a generated GoMock package.
package tests

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/rashad-j/device-management-api/internal/core/domain"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeviceRepository) Create(device domain.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", device)
}

// Create indicates an expected call of Create.
func (mr *MockDeviceRepositoryMockRecorder) Create(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeviceRepository)(nil).Create), device)
}

// Delete mocks base method.
func (m *MockDeviceRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeviceRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeviceRepository)(nil).Delete), id)
}

// GetById mocks base method.
func (m *MockDeviceRepository) GetById(id uuid.UUID) (domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDeviceRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDeviceRepository)(nil).GetById), id)
}

// List mocks base method.
func (m *MockDeviceRepository) List() []domain.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]domain.Device)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockDeviceRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeviceRepository)(nil).List))
}

// SearchByBrand mocks base method.
func (m *MockDeviceRepository) SearchByBrand(brand string) []domain.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByBrand", brand)
	ret0, _ := ret[0].([]domain.Device)
	return ret0
}

// SearchByBrand indicates an expected call of SearchByBrand.
func (mr *MockDeviceRepositoryMockRecorder) SearchByBrand(brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByBrand", reflect.TypeOf((*MockDeviceRepository)(nil).SearchByBrand), brand)
}

// Update mocks base method.
func (m *MockDeviceRepository) Update(id uuid.UUID, device domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDeviceRepositoryMockRecorder) Update(id, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceRepository)(nil).Update), id, device)
}
